{"version":3,"sources":["components/Player.js","components/Song.js","components/Nav.js","data.js","components/LibrarySongs.js","components/Library.js","App.js","index.js"],"names":["Player","songs","currentSong","isPlaying","setIsPlaying","audioRef","songInfo","setSongInfo","setCurrentSong","activeLibraryHandler","setSongs","useState","activeVolume","setActiveVolume","getTime","time","minutes","Math","floor","seconds","secondsWithZero","String","padStart","skipTrackHandler","direction","a","currentIndex","findIndex","song","id","length","current","play","trackAnim","transform","animationPercentage","className","currentTime","style","background","color","min","max","duration","value","onChange","e","target","type","onClick","size","icon","faAngleDoubleLeft","pause","faPause","faPlay","faAngleDoubleRight","faVolumeDown","volume","step","Song","console","log","alt","name","src","cover","artist","Nav","libraryStatus","setLibraryStatus","faMusic","chillHop","audio","uuidv4","active","LibrarySongs","key","songSelectHandler","newSongs","map","Library","App","useRef","data","nextPrev","timeUpdateHandler","roundedCurrent","round","roundedDuration","songEndHandler","onLoadedMetadata","onTimeUpdate","ref","onEnded","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aafe3b8c.chunk.js","sourcesContent":["import React, {useState}  from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleDoubleLeft,\r\n  faAngleDoubleRight,\r\n  faPause,\r\n  faVolumeDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  songs,\r\n  currentSong,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  audioRef,\r\n  songInfo,\r\n  setSongInfo,\r\n  setCurrentSong,\r\n  setSongs,\r\n  activeLibraryHandler\r\n}) => {\r\n  //use effct\r\n // run this function when ever current song gets updated\r\n  //volume\r\n  const [activeVolume, setActiveVolume] = useState(false);\r\n  //event handlers\r\n  const playSongHandler = () => {\r\n    //plays the current song which audi is ref to.\r\n    //user reference to get specific html component\r\n    if (isPlaying) {\r\n      // if song is playing\r\n      audioRef.current.pause(); // pause\r\n      setIsPlaying(!isPlaying);\r\n    } else {\r\n      audioRef.current.play();\r\n      setIsPlaying(!isPlaying);\r\n    }\r\n  };\r\n\r\n  const getTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    const secondsWithZero = String(seconds).padStart(2, \"0\");\r\n    return `${minutes}:${secondsWithZero}`;\r\n  };\r\n\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value; // this will update the audio aswell\r\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); // lets you drag the song bar to certain times\r\n  };\r\n\r\n  const skipTrackHandler = async(direction) => {\r\n    //grab index first to determine where yo uare in the song\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id); //check if song id matches current song id and grab its index\r\n\r\n    if (direction === \"skip-forward\") {\r\n      if (currentIndex === songs.length - 1) {\r\n        // if the current song is the last song\r\n        await setCurrentSong(songs[0]); // set the current song to the first song so it does not go out of bouns\r\n        activeLibraryHandler(songs[0]);\r\n      } else {\r\n        await setCurrentSong(songs[currentIndex + 1]); // go to next song\r\n        activeLibraryHandler(songs[currentIndex + 1]);\r\n      }\r\n    }\r\n\r\n    if (direction === \"skip-back\") {\r\n      if (currentIndex === 0) {\r\n        await setCurrentSong(songs[songs.length - 1]); //if the current song is the first song, set it to the last song\r\n        activeLibraryHandler(songs[songs.length - 1]);\r\n      } else {\r\n        await setCurrentSong(songs[currentIndex - 1]); // go to previous song\r\n        activeLibraryHandler(songs[currentIndex - 1]);\r\n      }\r\n    }\r\n    // playAudio(isPlaying, audioRef);\r\n    if(isPlaying) audioRef.current.play();\r\n  };\r\n  //Add styles\r\n  const trackAnim ={\r\n    transform: `translateX(${songInfo.animationPercentage}%)`\r\n  }\r\n\r\n  const changeVolume = (e) => {\r\n    let value = e.target.value;\r\n    audioRef.current.volume = value;\r\n    setSongInfo({...songInfo, volume: value})\r\n  }\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{getTime(songInfo.currentTime)}</p>\r\n        <div style={{background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`}} className=\"track\">\r\n          {/* picks up color of current song and make gradient out of it */}\r\n          <input\r\n            min={0}\r\n            max={songInfo.duration}\r\n            value={songInfo.currentTime}\r\n            onChange={dragHandler}\r\n            type=\"range\"\r\n          />\r\n          <div style={trackAnim} className=\"animate-track\"></div>\r\n        </div>\r\n\r\n        {/* // add || 0 to remove the NaN the loads up when you switch to a different song */}\r\n        <p>{getTime(songInfo.duration || 0)}</p>\r\n      </div>\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-back\")}\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleDoubleLeft}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playSongHandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={() => skipTrackHandler(\"skip-forward\")}\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleDoubleRight}\r\n        />\r\n        <FontAwesomeIcon\r\n        className =\"volume\"\r\n        onClick={()=>setActiveVolume(!activeVolume)}\r\n        icon={faVolumeDown}\r\n         />\r\n        {activeVolume && (\r\n          <input \r\n          onChange={changeVolume}\r\n          value={songInfo.volume}\r\n          max=\"1\"\r\n          min=\"0\"\r\n          step=\"0.01\"\r\n          type=\"range\"/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\n//This file just display song title, picture, mp3 file\r\n\r\nconst Song = ({ currentSong,isPlaying }) => {\r\n  console.log(isPlaying);\r\n  return (\r\n    <div className=\"song-container\">\r\n      <div className=\"song-cover\">\r\n        <img className={isPlaying === true ? 'spinning' : ''} alt={currentSong.name} src={currentSong.cover} />\r\n        <h2>{currentSong.name}</h2>\r\n        <h3>{currentSong.artist}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","import React from 'react'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faMusic} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst Nav = ({libraryStatus, setLibraryStatus}) => {\r\n    return(\r\n        <nav>\r\n            <h1>MangoMusic</h1>\r\n            <button onClick={() => setLibraryStatus(!libraryStatus)}>\r\n            Library\r\n            <FontAwesomeIcon icon={faMusic}/>\r\n            </button>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Nav;","import { v4 as uuidv4 } from \"uuid\";\r\nfunction chillHop() {\r\n  return [\r\n    {\r\n      name: \"Beaver Creek\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n      artist: \"Aso, Middle School, Aviino\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\r\n      color: [\"#205950\", \"#2ab3bf\"],\r\n      id: uuidv4(),\r\n      active: true,\r\n    },\r\n    {\r\n      name: \"Daylight\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n      artist: \"Aiguille\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\r\n      color: [\"#EF8EA9\", \"#ab417f\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Keep Going\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n      artist: \"Swørn\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\r\n      color: [\"#CD607D\", \"#c94043\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Nightfall\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n      artist: \"Aiguille\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\r\n      color: [\"#EF8EA9\", \"#ab417f\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Reflection\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n      artist: \"Swørn\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\r\n      color: [\"#CD607D\", \"#c94043\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    {\r\n      name: \"Under the City Stars\",\r\n      cover:\r\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n      artist: \"Aso, Middle School, Aviino\",\r\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\r\n      color: [\"#205950\", \"#2ab3bf\"],\r\n      id: uuidv4(),\r\n      active: false,\r\n    },\r\n    //ADD MORE HERE\r\n  ];\r\n}\r\n\r\nexport default chillHop;","import React from \"react\";\r\n\r\n//This file just display song title, picture, mp3 file\r\n\r\nconst LibrarySongs = ({\r\n  songs,\r\n  song,\r\n  setCurrentSong,\r\n  id,\r\n  key,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n}) => {\r\n  const songSelectHandler = async () => {\r\n    // this will need all the songs make sure to pass that down\r\n    await setCurrentSong(song);\r\n    //add active state\r\n    const newSongs = songs.map((song) => {\r\n      if (song.id === id) {\r\n        return {\r\n          ...song,\r\n          active: true, //change the active state of the selected song to true\r\n        };\r\n      }else{\r\n        return{\r\n          ...song,\r\n          active:false, //change the active state of the songs not selected to false\r\n        }\r\n      }\r\n    });\r\n    await setSongs(newSongs);\r\n    if(isPlaying) audioRef.current.play();\r\n\r\n    //check if song is playing\r\n  //   if (isPlaying) {\r\n  //     const playPromise = audioRef.current.play();\r\n  //     if (playPromise !== undefined) {\r\n  //       playPromise.then((audio) => {\r\n  //         audioRef.current.play();\r\n  //       });\r\n  //     }\r\n  //   }\r\n   };\r\n\r\n  return (\r\n    <div\r\n      onClick={songSelectHandler}\r\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\r\n    >\r\n      <img alt=\"\" src={song.cover} />\r\n\r\n      <div className=\"song-description\">\r\n        <h3>{song.name}</h3>\r\n        <h4>{song.artist}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LibrarySongs;\r\n","import React from \"react\";\r\nimport LibrarySongs from \"./LibrarySongs\";\r\n\r\nconst Library = ({\r\n  songs,\r\n  setCurrentSong,\r\n  audioRef,\r\n  isPlaying,\r\n  setSongs,\r\n  libraryStatus,\r\n}) => {\r\n  return (\r\n    <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\r\n      <h2>Library</h2>\r\n      <div className=\"library-songs\">\r\n        {songs.map((song) => (\r\n          <LibrarySongs\r\n            audioRef={audioRef}\r\n            key={song.id}\r\n            id={song.id}\r\n            songs={songs}\r\n            song={song}\r\n            setCurrentSong={setCurrentSong}\r\n            isPlaying={isPlaying}\r\n            setSongs={setSongs}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Library;\r\n","import React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\";\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Nav from \"./components/Nav\";\nimport data from \"./data\";\n\nimport Library from \"./components/Library\";\n\nfunction App() {\n  //ref\n  const audioRef = useRef(null);\n  //State\n  const [songs, setSongs] = useState(data()); //grabs all songs  used for selecting and setting song in library ui\n  const [currentSong, setCurrentSong] = useState(songs[0]); // get current song\n  const [isPlaying, setIsPlaying] = useState(false); // check to see if song is playing or paused\n  // Time State infor\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n    volume: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false); // will turn on or off the library ui\n  const activeLibraryHandler = (nextPrev) => {\n    const newSongs = songs.map((song) => {\n      if (song.id === nextPrev.id) {\n        return {\n          ...song,\n          active: true, //change the active state of the selected song to true\n        };\n      } else {\n        return {\n          ...song,\n          active: false, //change the active state of the songs not selected to false\n        };\n      }\n    });\n\n    setSongs(newSongs);\n  }\n\n  const timeUpdateHandler = (e) => {\n    // get current time and duration time of the song using onTimeUpdate\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    //calculate percentage\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animationPercentage = Math.round(\n      (roundedCurrent / roundedDuration) * 100\n    );\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage,\n      volume: e.target.volume,\n    }); // since you're periodaclly updating use spread operator because songinfo is an object\n  };\n\n  const songEndHandler = async () => { // when at end of song to next song and play\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id); //check if song id matches current song id and grab its index\n    await setCurrentSong(songs[currentIndex + 1]); // go to next song\n    activeLibraryHandler(songs[currentIndex + 1]);\n    if(isPlaying) audioRef.current.play();\n  };\n\n  return (\n    <div className={`App ${libraryStatus ? 'library-active' : \"\" }`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} isPlaying={isPlaying}/>\n      <Player\n        activeLibraryHandler={activeLibraryHandler}\n        setSongs={setSongs}\n        songs={songs}\n        songInfo={songInfo}\n        setSongInfo={setSongInfo}\n        audioRef={audioRef}\n        currentSong={currentSong}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        libraryStatus={libraryStatus}\n        audioRef={audioRef}\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n      />\n      <audio\n        onLoadedMetadata={timeUpdateHandler}\n        onTimeUpdate={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}